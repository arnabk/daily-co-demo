{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["MainContainer","styled","div","Button","button","VideoFrame","iframe","props","joined","App","useState","videoFrame","setVideoFrame","setJoined","useEffect","DailyIframe","wrap","document","querySelector","onClick","leave","join","url","showLeaveButton","showFullscreenButton","allow","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"w3BAIA,IAAMA,EAAgBC,IAAOC,IAAV,KAObC,EAASF,IAAOG,OAAV,KAiBNC,EAAaJ,IAAOK,OAAV,KAMH,SAAAC,GAAK,OAAIA,EAAMC,OAAS,GAAK,UA+B3BC,MA5Bf,WAAgB,IAAD,EACuBC,qBADvB,mBACNC,EADM,KACMC,EADN,OAEeF,oBAAS,GAFxB,mBAENF,EAFM,KAEEK,EAFF,KAoBb,OAhBAC,qBAAU,WACRF,EAAcG,IAAYC,KAAKC,SAASC,cAAc,cACrD,IAeD,kBAAClB,EAAD,KACE,kBAACG,EAAD,CAAQgB,QAdY,WAClBR,IACEH,GACFG,EAAWS,QACXP,GAAU,KAEVF,EAAWU,KAAK,CAAEC,IAAK,2CACzBC,iBAAiB,EAAOC,sBAAsB,IAC5CX,GAAU,OAMuBL,EAAS,MAAQ,OAApD,UACA,kBAACH,EAAD,CAAYoB,MAAM,+BAA+BjB,OAAQA,MChD3CkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFhB,SAASiB,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7cee6809.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport DailyIframe from \"@daily-co/daily-js\";\n\nconst MainContainer = styled.div`\n  height: 100vh;\n  width: 100%;\n  margin: auto;\n  text-align: center;\n`;\n\nconst Button = styled.button`\n  position: relative;\n  top: 45%;\n  width: 200px;\n  height: 50px;\n  border: none;\n  background-color: aquamarine;\n  border-radius: 10px;\n  font-size: x-large;\n  outline: none;\n  cursor: pointer;\n  &:hover,\n  &:active {\n    border: 1px dashed black;\n  }\n`;\n\nconst VideoFrame = styled.iframe`\n  position: fixed;\n  bottom: 50px;\n  right: 50px;\n  width: 400px;\n  height: 500px;\n  display: ${props => props.joined ? '' : 'none'};\n`;\n\nfunction App() {\n  const [videoFrame, setVideoFrame] = useState();\n  const [joined, setJoined] = useState(false);\n\n  useEffect(() => {\n    setVideoFrame(DailyIframe.wrap(document.querySelector(\"iframe\")));\n  }, []);\n\n  const toggleJoinClass = () => {\n    if (videoFrame) {\n      if (joined) {\n        videoFrame.leave();\n        setJoined(false);\n      } else {\n        videoFrame.join({ url: \"https://arnabkarmakar.daily.co/test-room\",\n      showLeaveButton: false, showFullscreenButton: false, });\n        setJoined(true);\n      }\n    }\n  };\n  return (\n    <MainContainer>\n      <Button onClick={toggleJoinClass}>{joined ? \"End\" : \"Join\"} Class</Button>\n      <VideoFrame allow=\"microphone; camera; autoplay\" joined={joined} />\n    </MainContainer>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}